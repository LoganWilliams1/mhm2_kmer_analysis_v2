variables:
  GIT_STRATEGY: fetch
  REGISTRY: registry.gitlab.com
  APPLICATION: mhmxx
  TEST_IMAGE: $REGISTRY/$REGISTRY_USER/$APPLICATION:latest
  RELEASE_IMAGE: $REGISTRY/$REGISTRY_USER/$APPLICATION:$CI_BUILD_REF_NAME
  HULK_UPCXX_VER: 2020.3.8


stages:
  - build
  - validation
  - accuracy

#
# cori
#

Cori:build:
  stage: build
  tags:
    - Cori
  script:
    - set -e
    - set -x
    - git submodule init
    - git submodule sync
    - git submodule update
    - uname -a
    - pwd
    - date
    - echo "Establishing variables"
    - export MHMXX_SOURCE=$(pwd)
    - export BASE=${SCRATCH}/tmp/gitlab-runner-scratch-Cori-mhmxx-${USER}
    - export SCRATCH=${BASE}/mhmxx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export INSTALL_PREFIX=${SCRATCH}/install
    - export BUILD_PREFIX=${SCRATCH}/build
    - export RUN_PREFIX=${SCRATCH}/runs
    - echo "BASE=${BASE} SCRATCH=${SCRATCH}"
    - mkdir -p ${BASE}
    - rm -rf ${SCRATCH}
    - echo "Cleaning out old installs"
    - find ${BASE} -maxdepth 1  -name 'mhmxx-*'  -mtime +4 -type d -exec rm -rf '{}' ';' || /bin/true
    - mkdir -p ${SCRATCH} ${RUN_PREFIX}
    - lmstat -a -c $INTEL_LICENSE_FILE || /bin/true
    - echo "Loading KNL modules for upcxx on cori GNU"
    - source ${MHMXX_SOURCE}/.env-cori-knl/gnu.sh
    - module list
    - export MHMXX_BUILD=${BUILD_PREFIX}-knl-dbg
    - mkdir -p ${MHMXX_BUILD}
    - cd $MHMXX_BUILD
    - echo "Building KNL GNU Debug"
    - CXX=CC cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-knl-dbg -DCMAKE_BUILD_TYPE=Debug ${MHMXX_SOURCE}
    - make -j 8 install
    - export MHMXX_BUILD=${BUILD_PREFIX}-knl-reldbg
    - mkdir -p ${MHMXX_BUILD}
    - cd $MHMXX_BUILD
    - echo "Building KNL GNU RelWithDebInfo"
    - CXX=CC cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-knl-reldbg -DCMAKE_BUILD_TYPE=RelWithDebInfo ${MHMXX_SOURCE}
    - make -j 8 install
    - export MHMXX_BUILD=${BUILD_PREFIX}-knl
    - mkdir -p ${MHMXX_BUILD}
    - cd $MHMXX_BUILD
    - echo "Building KNL GNU Release"
    - CXX=CC cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-knl -DCMAKE_BUILD_TYPE=Release ${MHMXX_SOURCE}
    - make -j 8 install
    - echo "Loading Haswell modules for upcxx GNU"
    - source ${MHMXX_SOURCE}/.env-cori-haswell/gnu.sh
    - module list
    - export MHMXX_BUILD=${BUILD_PREFIX}-haswell
    - mkdir -p ${MHMXX_BUILD}
    - cd $MHMXX_BUILD
    - echo "Building Haswell GNU Release"
    - CXX=CC cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-haswell -DCMAKE_BUILD_TYPE=Release ${MHMXX_SOURCE}
    - make -j 8 install
    - echo "Done building"

Cori:validation:
  stage: validation
  tags:
    - Cori
  script:
    - set -e
    - set -x
    - uname -a
    - pwd
    - date
    - export GASNET_BACKTRACE=1
    - echo "Establishing variables"
    - export MHMXX_SOURCE=$(pwd)
    - export BASE=${SCRATCH}/tmp/gitlab-runner-scratch-Cori-mhmxx-${USER}
    - export SCRATCH=${BASE}/mhmxx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export INSTALL_PREFIX=${SCRATCH}/install
    - export BUILD_PREFIX=${SCRATCH}/build
    - export RUN_PREFIX=${SCRATCH}/runs
    - echo "BASE=${BASE} SCRATCH=${SCRATCH}"
    - echo "Loading KNL modules for upcxx on cori"
    - source ${MHMXX_SOURCE}/.env-cori-knl/gnu.sh
    - module list
    - cd $SCRATCH
    - inst=${INSTALL_PREFIX}-knl
    - echo "Testing builds on KNL - $inst"
    - export RWDI=${INSTALL_PREFIX}-knl-reldbg/bin/mhmxx.py
    - export DBG=${INSTALL_PREFIX}-knl-dbg/bin/mhmxx.py
    - export REL=${INSTALL_PREFIX}-knl/bin/mhmxx.py
    - export ARCTIC=/global/cscratch1/sd/regan/GitlabCIData/
    - export OPTS="-r ${ARCTIC}/arctic_sample_0.fq -v --checkpoint=no"
    - export GASNET_BACKTRACE=1
    - echo "Submitting job on 2 nodes roughly RWDI=400s, DBG --kmer-lens 63 =456s  ...REL=170s"
    - knl_job=$(sbatch --parsable --job-name="CI-mhmxx-${CI_COMMIT_SHORT_SHA}" --account=m2865 -C knl --nodes=3 --qos=debug --time=30:00 --wrap="${RWDI} $OPTS -o ${RUN_PREFIX}/rwdi && ${DBG} ${OPTS} --kmer-lens 63 -o ${RUN_PREFIX}/dbg")
    - echo "Waiting for knl job $knl_job"
    - date
    - while sacct -j $knl_job -o state -X -n | grep ING 2>/dev/null ; do sleep 120 ; date ; done
    - sacct=$(sacct -j $knl_job)
    - echo "$sacct"
    - wasgood=$(sacct -j $knl_job | grep -v JobID | grep -v -- --- | grep -v '0:0' || true)
    - [ -n "$wasgood" ]
    - ${INSTALL_PREFIX}-knl/bin/check_asm_quality.py --asm-dir ${RUN_PREFIX}/rwdi --expected-quals ${ARCTIC}/good-arctic-sample0.txt --refs ${ARCTIC}/arcticsynth-refs.fa
    - echo "Completed"

Cori:accuracy:
  stage: accuracy
  tags:
    - Cori
  script:
    - set -e
    - set -x
    - uname -a
    - pwd
    - date
    - export GASNET_BACKTRACE=1
    - echo "Establishing variables"
    - export MHMXX_SOURCE=$(pwd)
    - export BASE=${SCRATCH}/tmp/gitlab-runner-scratch-Cori-mhmxx-${USER}
    - export SCRATCH=${BASE}/mhmxx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export INSTALL_PREFIX=${SCRATCH}/install
    - export BUILD_PREFIX=${SCRATCH}/build
    - export RUN_PREFIX=${SCRATCH}/runs
    - echo "BASE=${BASE} SCRATCH=${SCRATCH}"
    - echo "Loading KNL modules for upcxx on cori"
    - source ${MHMXX_SOURCE}/.env-cori-knl/gnu.sh
    - module list
    - cd $SCRATCH
    - echo "Testing accuracy"
    - export REL=${INSTALL_PREFIX}-knl/bin/mhmxx.py
    - export ARCTIC=/global/cscratch1/sd/regan/GitlabCIData/
    - export OPTS="-r ${ARCTIC}/arctic_sample_0.fq -v --checkpoint=no"
    - echo "Submitting job... on 2 nodes is is roughly REL=170s"
    - knl_job=$(sbatch --parsable --job-name="CI-mhmxx-${CI_COMMIT_SHORT_SHA}" --account=m2865 -C knl --nodes=5 --qos=debug --time=10:00 --wrap="${REL} $OPTS -o ${RUN_PREFIX}/rel")
    - echo "Submitting full arctic job on 15 nodes"
    - export OPTS="-r ${ARCTIC}/arctic_samples.fq -v --checkpoint=no"
    - knl_job2=$(echo FIXME sbatch --parsable --job-name="CI-mhmxx-${CI_COMMIT_SHORT_SHA}" --account=m2865 -C knl --nodes=15 --qos=debug --time=30:00 --wrap="${REL} $OPTS -o ${RUN_PREFIX}/rel-full")
    - echo "Waiting for knl job $knl_job"
    - date
    - while sacct -j $knl_job -o state -X -n | grep ING 2>/dev/null ; do sleep 120 ; date ; done
    - sacct=$(sacct -j $knl_job)
    - echo "$sacct"
    - wasgood=$(sacct -j $knl_job | grep -v JobID | grep -v -- --- | grep -v '0:0' || true)
    - [ -n "$wasgood" ]
    - ${INSTALL_PREFIX}-knl/bin/check_asm_quality.py ${RUN_PREFIX}/rel --expected-quals ${ARCTIC}/good-arctic-sample0.txt --refs ${ARCTIC}/arcticsynth-refs.fa
#    - echo "Waiting for larger knl job $knl_job2"
#    - date
#    - while sacct -j $knl_job2 -o state -X -n | grep ING 2>/dev/null ; do sleep 120 ; date ; done
#    - sacct=$(sacct -j $knl_job2)
#    - echo "$sacct"
#    - wasgood=$(sacct -j $knl_job2 | grep -v JobID | grep -v -- --- | grep -v '0:0' || true)
#    - [ -n "$wasgood" ]
#    - ${INSTALL_PREFIX}-knl/bin/check_asm_quality.py --asm-dir ${RUN_PREFIX}/rel-full --expected-quals ${ARCTIC}/good-arctic-sample0.txt --refs ${ARCTIC}/arcticsynth-refs.fa






#
# hulk
#

HULK:build:
  stage: build
  tags:
    - HULK
  script:
    - set -e
    - set -x
    - git submodule init
    - git submodule sync
    - git submodule update
    - BASE=/work/gitlab-ci
    - CI_INSTALL=$BASE/ci-install-mhmxx-upcxx-${HULK_UPCXX_VER}
    - export PATH=$CI_INSTALL/bin:/bin:/usr/bin:/usr/local/bin
    - export HIPMER_DATA=${BASE}/scratch/
    - mkdir -p ${HIPMER_DATA}
    - export SCRATCH=${BASE}/scratch/mhmxx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export RUN_PREFIX=${SCRATCH}/runs
    - export GASNET_BACKTRACE=1
    - echo "Verifing and/or downloading test arctic data set"
    - bash -c "[ -f ${HIPMER_DATA}/arcticsynth-refs.fa ] || ( curl -LO https://portal.nersc.gov/project/hipmer/MetaHipMer_datasets_12_2019/ArcticSynth/samples/arcticsynth-refs.fa.gz && gunzip arcticsynth-refs.fa.gz && mv arcticsynth-refs.fa ${HIPMER_DATA}/arcticsynth-refs.fa )"
    - bash -c "[ -f ${HIPMER_DATA}/arctic_sample_0.fq ] || ( curl -LO https://portal.nersc.gov/project/hipmer/MetaHipMer_datasets_12_2019/ArcticSynth/samples/arctic_sample_0.fq.gz && gunzip arctic_sample_0.fq.gz && mv arctic_sample_0.fq ${HIPMER_DATA}/arctic_sample_0.fq )"
    - echo "Establishing all tests under BASE=$BASE and SCRATCH=$SCRATCH"
    - rm -rf ${SCRATCH}
    - mkdir -p ${SCRATCH}
    - export MHMXX_SOURCE=$(pwd)
    - env
    - uname -a
    - pwd
    - find . -type d -ls
    - date
    - echo "Purging any old tests"
    - ls -td ${BASE}/scratch/mhmxx-inst-* | tail -n +8 | xargs  rm -rf '{}' ';' || /bin/true
    - df -h
    - echo "Checking for cmake, Berkeley UPC and UPC++"
    - which cmake && cmake --version
    - echo "Checking or building upcxx"
    - which upcxx || UPCXXVER=${HULK_UPCXX_VER} ./upcxx-utils/contrib/install_upcxx.sh $CI_INSTALL
    - upcxx --version
    - echo "Building all flavors"
    - mkdir -p ${RUN_PREFIX}
    - export GASNET_BACKTRACE=1
    - export INSTALL_PREFIX=${SCRATCH}
    - rm -rf $SCRATCH/build
    - mkdir -p $SCRATCH/build
    - cd $SCRATCH/build
    - echo "Building Debug"
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}/mhmxx-dbg -DCMAKE_BUILD_TYPE=Debug ${MHMXX_SOURCE}
    - make -j 16 all install
    - make clean
    - echo "Building RelWithDebInfo"
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}/mhmxx-rwdi -DCMAKE_BUILD_TYPE=RelWithDebInfo ${MHMXX_SOURCE} || /bin/true
    - echo FIXME make -j 16 all install
    - echo FIXME make install
    - make clean
    - echo "Building Release"
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}/mhmxx-rel -DCMAKE_BUILD_TYPE=Release ${MHMXX_SOURCE}
    - make -j 16 all install
    - echo FIXME cd -
    - echo FIXME rm -rf $SCRATCH/build
    - echo "Completed"

    

HULK:validation:
  stage: validation
  tags:
    - HULK
  script:
    - set -e
    - set -x
    - BASE=/work/gitlab-ci
    - CI_INSTALL=$BASE/ci-install-mhmxx-upcxx-${HULK_UPCXX_VER}
    - export PATH=$CI_INSTALL/bin:/bin:/usr/bin:/usr/local/bin
    - export HIPMER_DATA=${BASE}/scratch/
    - export SCRATCH=${BASE}/scratch/mhmxx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export RUN_PREFIX=${SCRATCH}/runs
    - export GASNET_BACKTRACE=1
    - echo "Validating all tests under BASE=$BASE and SCRATCH=$SCRATCH"
    - env
    - df -h
    - uname -a
    - pwd
    - date
    - upcxx --version
    - reads=${HIPMER_DATA}/arctic_sample_0.fq 
    - echo "Starting RelWithDebInfo mhmxx on Arctic $reads"
    - ${INSTALL_PREFIX}/mhmxx-rwdi -r $reads -o ${RUN_PREFIX}/rwdi --checkpoint=no -v
    - echo "TODO verify"
    - echo "Starting debug build on with reduced workflow"
    - ${INSTALL_PREFIX}/mhmxx-dbg  -r $reads -o ${RUN_PREFIX}/dbg --kmer-lens 31,63 --checkpoint=no -v
    - echo "TODO verify"
    - echo "Completed"

HULK:accuracy:
  stage: accuracy
  tags:
    - HULK
  script:
    - set -e
    - set -x
    - git submodule init
    - git submodule sync
    - git submodule update
    - BASE=/work/gitlab-ci
    - CI_INSTALL=$BASE/ci-install-mhmxx-upcxx-${HULK_UPCXX_VER}
    - export PATH=$CI_INSTALL/bin:/bin:/usr/bin:/usr/local/bin
    - export HIPMER_DATA=${BASE}/scratch/
    - export SCRATCH=${BASE}/scratch/mhmxx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - echo "Running accuracy tests under BASE=$BASE and SCRATCH=$SCRATCH"
    - env
    - df -h
    - uname -a
    - pwd
    - date
    - upcxx --version
    - reads=${HIPMER_DATA}/arctic_sample_0.fq 
    - echo "Starting Release mhmxx on Arctic $reads"
    - ${INSTALL_PREFIX}/mhmxx-rwdi -r $reads -o ${RUN_PREFIX}/rel --checkpoint=no -v
    - echo "TODO verify"
    - echo "Completed"

after_script:
  - echo "Done"

