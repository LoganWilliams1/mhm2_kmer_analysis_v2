workflow:
  rules:
    - if: $CI_COMMIT_BRANCH =~ /-WIP$/
      when: never
    - when: always

variables:
  GIT_STRATEGY: fetch
  REGISTRY: registry.gitlab.com
  APPLICATION: mhm2
  TEST_IMAGE: $REGISTRY/$REGISTRY_USER/$APPLICATION:latest
  RELEASE_IMAGE: $REGISTRY/$REGISTRY_USER/$APPLICATION:$CI_BUILD_REF_NAME
  UPCXX_VER: 2023.3.0

stages:
  - build
  - validation
  - accuracy

#
# perlmutter
#

Perlmutter:build:
  stage: build
  tags:
    - Perlmutter
  script:
    - set -e
    - git submodule init
    - git submodule sync
    - git submodule update
    - uname -a
    - pwd
    - date
    - echo "Establishing variables"
    - export MHM2_SOURCE=$(pwd)
    - export BASE=${PSCRATCH}/gitlab-ci/${NERSC_HOST}-${CI_PROJECT_NAME}-${USER}
    - export CI_SCRATCH=${BASE}/${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_PIPELINE_ID}
    - echo "MHM2_SOURCE=${MHM2_SOURCE} BASE=${BASE} CI_SCRATCH=${CI_SCRATCH}"
    - mkdir -p ${BASE}
    - rm -rf ${CI_SCRATCH}
    - echo "Cleaning out old installs"
    - find ${BASE}/ -maxdepth 1  -name "${CI_PROJECT_NAME}-*-*-*"  -mtime +14 -type d -exec rm -rf '{}' ';' || /bin/true
    - mkdir -p ${CI_SCRATCH}
    - dt=$(date '+%Y%m%d_%H%M%S')
    - exec >  >(tee -ia ${CI_SCRATCH}/build-${dt}.log)
    - exec 2> >(tee -ia ${CI_SCRATCH}/build-${dt}.err >&2)    
    - echo "Logging to ${CI_SCRATCH}/build-$dt.log and .err at $(date) on $(uname -n) in $(pwd)"
    - export MHM2_NEW_SOURCE=${CI_SCRATCH}/repo
    - echo "Copying source from ${MHM2_SOURCE}/ to ${MHM2_NEW_SOURCE}/"
    - export MHM2_BUILD_THREADS=64
    - mkdir -p ${MHM2_NEW_SOURCE}
    - rsync -a ${MHM2_SOURCE}/ ${MHM2_NEW_SOURCE}
    - export MHM2_SOURCE=${MHM2_NEW_SOURCE}
    - cd ${CI_SCRATCH}/repo
    - export OUT=perlmutter.build.${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_PIPELINE_ID}.${dt}.out
    - sbatch --output=$OUT --account=m2865 --qos=debug --time=30:00 --nodes=1 -C gpu --wait --wrap="${MHM2_SOURCE}/ci/perlmutter.build.sh"
    - cat $OUT
    - echo "Perlmutter build done"

Perlmutter:validation:
  stage: validation
  tags:
    - Perlmutter
  script:
    - set -e
    - uname -a
    - pwd
    - date
    - export GASNET_BACKTRACE=1
    - echo "Establishing variables"
    - export BASE=${SCRATCH}/gitlab-ci/${NERSC_HOST}-${CI_PROJECT_NAME}-${USER}
    - export CI_SCRATCH=${BASE}/${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_PIPELINE_ID}
    - export MHM2_SOURCE=${CI_SCRATCH}/repo
    - echo "MHM2_SOURCE=${MHM2_SOURCE} BASE=${BASE} CI_SCRATCH=${CI_SCRATCH}"
    - dt=$(date '+%Y%m%d_%H%M%S')
    - exec >  >(tee -ia ${CI_SCRATCH}/validation-${dt}.log)
    - exec 2> >(tee -ia ${CI_SCRATCH}/validation-${dt}.err >&2)    
    - echo "Logging to ${CI_SCRATCH}/validation-$dt.log and .err at $(date) on $(uname -n) in $(pwd)"
    - ${MHM2_SOURCE}/ci/perlmutter.validation.sh
    - echo "Perlmutter validation done"

Perlmutter:accuracy:
  stage: accuracy
  tags:
    - Perlmutter
  script:
    - set -e
    - uname -a
    - pwd
    - date
    - export GASNET_BACKTRACE=1
    - echo "Establishing variables"
    - export BASE=${SCRATCH}/gitlab-ci/${NERSC_HOST}-${CI_PROJECT_NAME}-${USER}
    - export CI_SCRATCH=${BASE}/${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_PIPELINE_ID}
    - export MHM2_SOURCE=${CI_SCRATCH}/repo
    - echo "MHM2_SOURCE=${MHM2_SOURCE} BASE=${BASE} CI_SCRATCH=${CI_SCRATCH}"
    - dt=$(date '+%Y%m%d_%H%M%S')
    - exec >  >(tee -ia ${CI_SCRATCH}/accuracy-$dt.log)
    - exec 2> >(tee -ia ${CI_SCRATCH}/accuracy-$dt.err >&2)
    - echo "Logging to ${CI_SCRATCH}/accuracy-$dt.log and .err at $(date) on $(uname -n) in $(pwd)"
    - ${MHM2_SOURCE}/ci/perlmutter.accuracy.sh
    - echo "Perlmutter accuracy done"


#
# hulk
#

HULK:build:
  stage: build
  tags:
    - HULK
  script:
    - set -e
    - export BASE=/work/gitlab-ci
    - export CI_SCRATCH=${BASE}/scratch/${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_PIPELINE_ID}
    - export CI_INSTALL=${BASE}/ci-install-${CI_PROJECT_NAME}-upcxx-${UPCXX_VER}
    - export CI_EXTRA_PATH="/usr/bin:${CI_INSTALL}/bin"
    - echo "Adding ci-install to PATH"
    - export PATH=${CI_EXTRA_PATH}:$PATH
    - export CI_UPCXX_CONFIGURE_OPTS="--enable-valgrind --disable-ibv --with-default-network=smp"
    - export GASNET_PHYSMEM_MAX=2/3
    - rm -rf ${CI_SCRATCH}/?*/
    - mkdir -p ${CI_SCRATCH}
    - dt=$(date '+%Y%m%d_%H%M%S')
    - exec >  >(tee -ia ${CI_SCRATCH}/build-$dt.log)
    - exec 2> >(tee -ia ${CI_SCRATCH}/build-$dt.err >&2)
    - echo "Logging to ${CI_SCRATCH}/build-$dt.log and .err at $(date) on $(uname -n) in $(pwd)"
    - env
    - set -x
    - ./ci/ubuntu.build.sh ${BASE}
    - echo "Completed successfully on hulk"
    

HULK:validation:
  stage: validation
  tags:
    - HULK
  script:
    - set -e
    - export BASE=/work/gitlab-ci
    - export CI_SCRATCH=${BASE}/scratch/${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_PIPELINE_ID}
    - export CI_INSTALL=${BASE}/ci-install-${CI_PROJECT_NAME}-upcxx-${UPCXX_VER}
    - export CI_EXTRA_PATH="/usr/bin:${CI_INSTALL}/bin"
    - echo "Adding ci-install to PATH"
    - export PATH=${CI_EXTRA_PATH}:$PATH
    - export GASNET_PHYSMEM_MAX=2/3
    - mkdir -p ${CI_SCRATCH}
    - dt=$(date '+%Y%m%d_%H%M%S')
    - exec >  >(tee -ia ${CI_SCRATCH}/validation-$dt.log)
    - exec 2> >(tee -ia ${CI_SCRATCH}/validation-$dt.err >&2)
    - echo "Logging to ${CI_SCRATCH}/validation-$dt.log and .err at $(date) on $(uname -n) in $(pwd)"
    - env
    - set -x
    - ./ci/ubuntu.validation.sh ${BASE}
    - echo "Completed successfully on hulk"

HULK:accuracy:
  stage: accuracy
  tags:
    - HULK
  script:
    - set -e
    - export BASE=/work/gitlab-ci
    - export CI_SCRATCH=${BASE}/scratch/${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_PIPELINE_ID}
    - export CI_INSTALL=${BASE}/ci-install-${CI_PROJECT_NAME}-upcxx-${UPCXX_VER}
    - export RUN_PREFIX=${CI_SCRATCH}/runs
    - echo "Adding ci-install to PATH"
    - export CI_EXTRA_PATH="/usr/bin:${CI_INSTALL}/bin"
    - export PATH=${CI_EXTRA_PATH}:$PATH
    - export GASNET_PHYSMEM_MAX=2/3
    - mkdir -p ${CI_SCRATCH}
    - dt=$(date '+%Y%m%d_%H%M%S')
    - exec >  >(tee -ia ${CI_SCRATCH}/accuracy-$dt.log)
    - exec 2> >(tee -ia ${CI_SCRATCH}/accuracy-$dt.err >&2)
    - echo "Logging to ${CI_SCRATCH}/accuracy-$dt.log and .err at $(date) on $(uname -n) in $(pwd) $(uptime)"
    - env
    - set -x
    - ./ci/ubuntu.accuracy.sh ${BASE}
    - echo "Extra full CI run on hulk"
    - cd ${CI_SCRATCH}
    - ./mhm2-rel/bin/ci_asm_qual_test-full.sh || FAILED="${FAILED} Could not run ci_asm_qual_test-full"
    - if [ -z "$FAILED" ] ; then echo "OK" ; else echo "Something failed somehow - ${FAILED}" ; false ; fi
    - if [ ! -f ./test-arctic-samples/final_assembly.fasta ] ; then FAILED="${FAILED} Did not find final_assembly.fasta on rel" ; fi
    - if [ -z "$FAILED" ] ; then echo "OK" ; else echo "Something failed somehow - ${FAILED}" ; false ; fi
    - mv test-arctic-samples ${RUN_PREFIX}/rel-test-arctic-samples
    - echo "Completed successfully on hulk"


#
# Bacteria.lbl.gov - build with GPU
#

Bacteria:build:
  stage: build
  tags:
    - Bacteria
  script:
    - set -e
    - export BASE=/scratch-bacteria/gitlab-ci
    - export CI_SCRATCH=${BASE}/scratch/${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_PIPELINE_ID}
    - export CI_INSTALL=${BASE}/ci-install-${CI_PROJECT_NAME}-upcxx-${UPCXX_VER}
    - echo "Adding ci-install, cuda and quast to path"
    - export CI_EXTRA_PATH="/usr/bin:${CI_INSTALL}/bin:/usr/local/cuda/bin:/scratch-fungi/quast-quast_5.2.0"
    - export PATH=${CI_EXTRA_PATH}:$PATH
    - export CI_UPCXX_CONFIGURE_OPTS="--enable-valgrind --enable-cuda --with-cxx=/usr/bin/mpicxx --enable-ibv --with-default-network=ibv"
    - export CI_CMAKE_OPTS="-DENABLE_CUDA=On"
    - export CXX=/usr/bin/mpicxx
    - export GASNET_PHYSMEM_MAX=2/3
    - rm -rf ${CI_SCRATCH}/?*/
    - mkdir -p ${CI_SCRATCH}
    - dt=$(date '+%Y%m%d_%H%M%S')
    - exec >  >(tee -ia ${CI_SCRATCH}/build-$dt.log)
    - exec 2> >(tee -ia ${CI_SCRATCH}/build-$dt.err >&2)
    - echo "Logging to ${CI_SCRATCH}/build-$dt.log and .err at $(date) on $(uname -n) in $(pwd)"
    - env
    - set -x
    - ./ci/ubuntu.build.sh ${BASE}
    - echo "Completed successfully on bacteria"

Bacteria:validation:
  stage: validation
  tags:
    - Bacteria
  script:
    - set -e
    - export BASE=/scratch-bacteria/gitlab-ci
    - export CI_SCRATCH=${BASE}/scratch/${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_PIPELINE_ID}
    - export CI_INSTALL=${BASE}/ci-install-${CI_PROJECT_NAME}-upcxx-${UPCXX_VER}
    - echo "Adding ci-install, cuda and quast to path"
    - export CI_EXTRA_PATH="/usr/bin:${CI_INSTALL}/bin:/usr/local/cuda/bin:/scratch-fungi/quast-quast_5.2.0"
    - export PATH=${CI_EXTRA_PATH}:$PATH
    - export CXX=/usr/bin/mpicxx
    - export GASNET_PHYSMEM_MAX=2/3
    - mkdir -p ${CI_SCRATCH}
    - dt=$(date '+%Y%m%d_%H%M%S')
    - exec >  >(tee -ia ${CI_SCRATCH}/validation-$dt.log)
    - exec 2> >(tee -ia ${CI_SCRATCH}/validation-$dt.err >&2)
    - echo "Logging to ${CI_SCRATCH}/validation-$dt.log and .err at $(date) on $(uname -n) in $(pwd)"
    - env
    - set -x
    - cp -p ./ci/ubuntu.validation.sh ${CI_SCRATCH}
    - cd ${CI_SCRATCH}
    - test_file=validation_test-$dt
    - rm -f ${test_file}
    - |
      batch << END_TEXT
        export PATH=${PATH} # keep CI path within batch
        date >> ${test_file}.log
        ${CI_SCRATCH}/ubuntu.validation.sh ${BASE} >${test_file}.log 2>&1 && echo Success > ${test_file} || echo Failed > ${test_file}
      END_TEXT
    - while [ ! -f ${test_file} ] ; do echo "Waiting for job to complete via batch subsystem on ${test_file}"; date; uptime ; sleep 60  ; done
    - cat ${test_file} ${test_file}.log
    - grep Success ${test_file} || FAILED="${FAILED} Could not run ${test_file}"
    - if [ -z "$FAILED" ] ; then echo "OK" ; else echo "Something failed somehow - ${FAILED}" ; false ; fi
    - echo "Completed successfully on bacteria"

Bacteria:accuracy:
  stage: accuracy
  tags:
    - Bacteria
  script:
    - set -e
    - export BASE=/scratch-bacteria/gitlab-ci
    - export CI_SCRATCH=${BASE}/scratch/${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_PIPELINE_ID}
    - export CI_INSTALL=${BASE}/ci-install-${CI_PROJECT_NAME}-upcxx-${UPCXX_VER}
    - export RUN_PREFIX=${CI_SCRATCH}/runs
    - echo "Adding ci-install, cuda and quast to path"
    - export CI_EXTRA_PATH="/usr/bin:${CI_INSTALL}/bin:/usr/local/cuda/bin:/scratch-fungi/quast-quast_5.2.0"
    - export PATH=${CI_EXTRA_PATH}:$PATH
    - export CXX=/usr/bin/mpicxx
    - export GASNET_PHYSMEM_MAX=2/3
    - mkdir -p ${CI_SCRATCH}
    - dt=$(date '+%Y%m%d_%H%M%S')
    - exec >  >(tee -ia ${CI_SCRATCH}/accuracy-$dt.log)
    - exec 2> >(tee -ia ${CI_SCRATCH}/accuracy-$dt.err >&2)
    - echo "Logging to ${CI_SCRATCH}/accuracy-$dt.log and .err at $(date) on $(uname -n) in $(pwd) $(uptime)"
    - env
    - set -x
    - cp -p ./ci/ubuntu.accuracy.sh ${CI_SCRATCH}
    - cd ${CI_SCRATCH}
    - test_file=ci_asm_qual_full_test-$dt
    - rm -f ${test_file}
    - |
      batch << END_TEXT
        export PATH=${PATH} # keep CI path within batch
        date >> ${test_file}.log
        ${CI_SCRATCH}/ubuntu.accuracy.sh ${BASE} >>${test_file}.log 2>&1 && echo Success > ${test_file} || echo Failed > ${test_file}
      END_TEXT
    - while [ ! -f ${test_file} ] ; do echo "Waiting for job to complete via batch subsystem: ${test_file}"; date; uptime ; sleep 60  ; done
    - cat ${test_file} ${test_file}.log
    - grep Success ${test_file} || FAILED="${FAILED} Could not run ${test_file}"
    - if [ -z "$FAILED" ] ; then echo "OK" ; else echo "Something failed somehow - ${FAILED}" ; false ; fi
    - echo "Extra full CI run on bacteria and fungi using GPUs scheduled via the batch system"
    - test_file=ci_asm_qual_full_test_2node-$dt
    - rm -f ${test_file}
    - |
      batch << END_TEXT
        export PATH=${PATH} # keep CI path within batch
        date >> ${test_file}.log
        ./mhm2-rel/bin/ci_asm_qual_test-full.sh --procs=32 --nodes=2 >>${test_file}.log 2>&1 && echo Success > ${test_file} || echo Failed > ${test_file}
      END_TEXT
    - while [ ! -f ${test_file} ] ; do echo "Waiting for job to complete via batch subsystem: ${test_file}"; date; uptime ; sleep 60  ; done
    - cat ${test_file} ${test_file}.log
    - grep Success ${test_file} || FAILED="${FAILED} Could not run ${test_file}"
    - if [ -z "$FAILED" ] ; then echo "OK" ; else echo "Something failed somehow - ${FAILED}" ; false ; fi
    - if [ ! -f ./test-arctic-samples/final_assembly.fasta ] ; then FAILED="${FAILED} Did not find final_assembly.fasta on rel" ; fi
    - if [ -z "$FAILED" ] ; then echo "OK" ; else echo "Something failed somehow - ${FAILED}" ; false ; fi
    - mv test-arctic-samples ${RUN_PREFIX}/rel-test-arctic-samples
    - echo "Completed successfully on bacteria"


#
# Fungi.lbl.gov - build without GPU
#

Fungi:build:
  stage: build
  tags:
    - Fungi
  script:
    - set -e
    - export BASE=/scratch-fungi/gitlab-ci
    - export CI_SCRATCH=${BASE}/scratch/${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_PIPELINE_ID}
    - export CI_INSTALL=${BASE}/ci-install-${CI_PROJECT_NAME}-upcxx-${UPCXX_VER}
    - echo "Adding ci-install and quast to path"
    - export CI_EXTRA_PATH="/usr/bin:${CI_INSTALL}/bin"
    - export PATH=${CI_EXTRA_PATH}:$PATH
    - export CXX=/usr/bin/mpicxx
    - export CI_CMAKE_OPTS="-DENABLE_CUDA=Off"
    - export CI_UPCXX_CONFIGURE_OPTS="--enable-valgrind --with-cxx=/usr/bin/mpicxx --enable-ibv --with-default-network=ibv"
    - export GASNET_PHYSMEM_MAX=2/3
    - rm -rf ${CI_SCRATCH}/?*/
    - mkdir -p ${CI_SCRATCH}
    - dt=$(date '+%Y%m%d_%H%M%S')
    - exec >  >(tee -ia ${CI_SCRATCH}/build-$dt.log)
    - exec 2> >(tee -ia ${CI_SCRATCH}/build-$dt.err >&2)
    - echo "Logging to ${CI_SCRATCH}/build-$dt.log and .err at $(date) on $(uname -n) in $(pwd)"
    - env
    - set -x
    - ./ci/ubuntu.build.sh ${BASE}
    
Fungi:validation:
  stage: validation
  tags:
    - Fungi
  script:
    - set -e
    - export BASE=/scratch-fungi/gitlab-ci
    - export CI_SCRATCH=${BASE}/scratch/${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_PIPELINE_ID}
    - export CI_INSTALL=${BASE}/ci-install-${CI_PROJECT_NAME}-upcxx-${UPCXX_VER}
    - echo "Adding ci-install and quast to path"
    - export CI_EXTRA_PATH="/usr/bin:${CI_INSTALL}/bin:/scratch-fungi/quast-quast_5.2.0"
    - export PATH=${CI_EXTRA_PATH}:$PATH
    - export CXX=/usr/bin/mpicxx
    - export GASNET_PHYSMEM_MAX=2/3
    - mkdir -p ${CI_SCRATCH}
    - dt=$(date '+%Y%m%d_%H%M%S')
    - exec >  >(tee -ia ${CI_SCRATCH}/validation-$dt.log)
    - exec 2> >(tee -ia ${CI_SCRATCH}/validation-$dt.err >&2)
    - echo "Logging to ${CI_SCRATCH}/validation-$dt.log and .err at $(date) on $(uname -n) in $(pwd)"
    - env
    - set -x
    - cp -p ./ci/ubuntu.validation.sh ${CI_SCRATCH}
    - cd ${CI_SCRATCH}
    - test_file=validation_test-$dt
    - rm -f ${test_file}
    - |
      batch << END_TEXT
        export PATH=${PATH} # keep CI path within batch
        date >> ${test_file}.log
        ${CI_SCRATCH}/ubuntu.validation.sh ${BASE} >> ${test_file}.log 2>&1 && echo Success > ${test_file} || echo Failed > ${test_file}
      END_TEXT
    - while [ ! -f ${test_file} ] ; do echo "Waiting for job to complete via batch subsystem on ${test_file}"; date; uptime ; sleep 60  ; done
    - cat ${test_file} ${test_file}.log
    - grep Success ${test_file} || FAILED="${FAILED} Could not run ${test_file}"
    - if [ -z "$FAILED" ] ; then echo "OK" ; else echo "Something failed somehow - ${FAILED}" ; false ; fi
    - echo "Completed successfully on fungi"

Fungi:accuracy:
  stage: accuracy
  tags:
    - Fungi
  script:
    - set -e
    - export BASE=/scratch-fungi/gitlab-ci
    - export CI_SCRATCH=${BASE}/scratch/${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}-${CI_PIPELINE_ID}
    - export CI_INSTALL=${BASE}/ci-install-${CI_PROJECT_NAME}-upcxx-${UPCXX_VER}
    - export RUN_PREFIX=${CI_SCRATCH}/runs
    - echo "Adding ci-install and quast to path"
    - export CI_EXTRA_PATH="/usr/bin:${CI_INSTALL}/bin:/scratch-fungi/quast-quast_5.2.0"
    - export PATH=/usr/bin:${CI_EXTRA_PATH}:$PATH
    - export CXX=/usr/bin/mpicxx
    - export GASNET_PHYSMEM_MAX=2/3
    - mkdir -p ${CI_SCRATCH}
    - dt=$(date '+%Y%m%d_%H%M%S')
    - exec >  >(tee -ia ${CI_SCRATCH}/accuracy-$dt.log)
    - exec 2> >(tee -ia ${CI_SCRATCH}/accuracy-$dt.err >&2)
    - echo "Logging to ${CI_SCRATCH}/accuracy-$dt.log and .err at $(date) on $(uname -n) in $(pwd) $(uptime)"
    - env
    - set -x
    - cp -p ./ci/ubuntu.accuracy.sh ${CI_SCRATCH}
    - cd ${CI_SCRATCH}
    - echo "Single node CI run on CPU only scheduled via the batch system"
    - test_file=ci_asm_qual_full_test-$dt
    - rm -f ${test_file}
    - |
      batch << END_TEXT
        export PATH=${PATH} # keep CI path within batch
        date >> ${test_file}.log
       ${CI_SCRATCH}/ubuntu.accuracy.sh ${BASE} >> ${test_file}.log 2>&1 && echo Success > ${test_file} || echo Failed > ${test_file}
    - while [ ! -f ${test_file} ] ; do echo "Waiting for job to complete via batch subsystem: ${test_file}"; date; uptime ; sleep 60  ; done
    - cat ${test_file}
    - grep Success ${test_file} || FAILED="${FAILED} Could not run ${test_file}"
    - if [ -z "$FAILED" ] ; then echo "OK" ; else echo "Something failed somehow - ${FAILED}" ; false ; fi
    - echo "Extra full CI run on both fungi and bacteria CPU only scheduled via the batch system"
    - test_file=ci_asm_qual_full_test_2node-$dt
    - rm -f ${test_file}
    - |
      batch << END_TEXT
        export PATH=${PATH} # keep CI path within batch
        date >> ${test_file}.log
       ./mhm2-rel/bin/ci_asm_qual_test-full.sh --procs=32 --nodes=2 >>${test_file}.log 2>&1 && echo Success > ${test_file} || echo Failed > ${test_file}
      END_TEXT
    - while [ ! -f ${test_file} ] ; do echo "Waiting for job to complete via batch subsystem: ${test_file}"; date; uptime ; sleep 60  ; done
    - cat ${test_file} ${test_file}.log
    - grep Success ${test_file} || FAILED="${FAILED} Could not run ${test_file}"
    - if [ -z "$FAILED" ] ; then echo "OK" ; else echo "Something failed somehow - ${FAILED}" ; false ; fi
    - if [ ! -f ./test-arctic-samples/final_assembly.fasta ] ; then FAILED="${FAILED} Did not find final_assembly.fasta on rel" ; fi
    - if [ -z "$FAILED" ] ; then echo "OK" ; else echo "Something failed somehow - ${FAILED}" ; false ; fi
    - mv test-arctic-samples ${RUN_PREFIX}/rel-test-arctic-samples
    - echo "Completed successfully on bacteria"


after_script:
  - date
  - echo "Done"
