variables:
  GIT_STRATEGY: fetch
  REGISTRY: registry.gitlab.com
  APPLICATION: mhmxx
  TEST_IMAGE: $REGISTRY/$REGISTRY_USER/$APPLICATION:latest
  RELEASE_IMAGE: $REGISTRY/$REGISTRY_USER/$APPLICATION:$CI_BUILD_REF_NAME
  HULK_UPCXX_VER: 2020.3.8


stages:
  - build
  - validation
  - accuracy

#
# cori
#

Cori:build:
  stage: build
  tags:
    - Cori
  script:
    - set -e
    - set -x
    - git submodule init
    - git submodule sync
    - git submodule update
    - uname -a
    - pwd
    - date
    - echo "Establishing variables"
    - export MHMXX_SOURCE=$(pwd)
    - export BASE=${SCRATCH}/tmp/gitlab-runner-scratch-Cori-mhmxx-${USER}
    - export SCRATCH=${BASE}/mhmxx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export INSTALL_PREFIX=${SCRATCH}/install
    - export BUILD_PREFIX=${SCRATCH}/build
    - export RUN_PREFIX=${SCRATCH}/runs
    - echo "BASE=${BASE} SCRATCH=${SCRATCH}"
    - mkdir -p ${BASE}
    - rm -rf ${SCRATCH}
    - echo "Cleaning out old installs"
    - find ${BASE} -maxdepth 1  -name 'mhmxx-*'  -mtime +4 -type d -exec rm -rf '{}' ';' || /bin/true
    - mkdir -p ${SCRATCH} ${RUN_PREFIX}
    - exec >  >(tee -ia ${SCRATCH}/build.log)
    - exec 2> >(tee -ia ${SCRATCH}/build.err >&2)    
    - echo "Logging to ${SCRATCH}/build.log and .err at $(date) on $(uname -n) in $(pwd)"
    - lmstat -a -c $INTEL_LICENSE_FILE || /bin/true
    - echo "Loading KNL modules for upcxx on cori GNU"
    - source ${MHMXX_SOURCE}/.env-cori-knl/gnu.sh
    - module list
    - export MHMXX_BUILD=${BUILD_PREFIX}-knl-dbg
    - mkdir -p ${MHMXX_BUILD}
    - cd $MHMXX_BUILD
    - echo "Building KNL GNU Debug"
    - CXX=CC cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-knl-dbg -DCMAKE_BUILD_TYPE=Debug ${MHMXX_SOURCE}
    - make -j 12 all install
    - export MHMXX_BUILD=${BUILD_PREFIX}-knl-reldbg
    - mkdir -p ${MHMXX_BUILD}
    - cd $MHMXX_BUILD
    - echo "Building KNL GNU RelWithDebInfo"
    - CXX=CC cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-knl-reldbg -DCMAKE_BUILD_TYPE=RelWithDebInfo ${MHMXX_SOURCE}
    - make -j 12 all install
    - export MHMXX_BUILD=${BUILD_PREFIX}-knl
    - mkdir -p ${MHMXX_BUILD}
    - cd $MHMXX_BUILD
    - echo "Building KNL GNU Release"
    - CXX=CC cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-knl -DCMAKE_BUILD_TYPE=Release ${MHMXX_SOURCE}
    - make -j 12 all install
    - echo "Loading Haswell modules for upcxx GNU"
    - source ${MHMXX_SOURCE}/.env-cori-haswell/gnu.sh
    - module list
    - export MHMXX_BUILD=${BUILD_PREFIX}-haswell
    - mkdir -p ${MHMXX_BUILD}
    - cd $MHMXX_BUILD
    - echo "Building Haswell GNU Release"
    - CXX=CC cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-haswell -DCMAKE_BUILD_TYPE=Release ${MHMXX_SOURCE}
    - make -j 12 all install
    - echo "Done building"

Cori:validation:
  stage: validation
  tags:
    - Cori
  script:
    - set -e
    - set -x
    - uname -a
    - pwd
    - date
    - export GASNET_BACKTRACE=1
    - echo "Establishing variables"
    - export MHMXX_SOURCE=$(pwd)
    - export BASE=${SCRATCH}/tmp/gitlab-runner-scratch-Cori-mhmxx-${USER}
    - export SCRATCH=${BASE}/mhmxx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export INSTALL_PREFIX=${SCRATCH}/install
    - export BUILD_PREFIX=${SCRATCH}/build
    - export RUN_PREFIX=${SCRATCH}/runs
    - echo "BASE=${BASE} SCRATCH=${SCRATCH}"
    - echo "Loading KNL modules for upcxx on cori"
    - source ${MHMXX_SOURCE}/.env-cori-knl/gnu.sh
    - module list
    - cd $SCRATCH
    - exec >  >(tee -ia ${SCRATCH}/validation.log)
    - exec 2> >(tee -ia ${SCRATCH}/validation.err >&2)   
    - echo "Logging to ${SCRATCH}/validation.log and .err at $(date) on $(uname -n) in $(pwd)"
    - FAILED=""   
    - inst=${INSTALL_PREFIX}-knl
    - echo "Testing builds on KNL - $inst"
    - export RWDI=${INSTALL_PREFIX}-knl-reldbg/bin/
    - export DBG=${INSTALL_PREFIX}-knl-dbg/bin/
    - export REL=${INSTALL_PREFIX}-knl/bin/
    - export ARCTIC=/global/cscratch1/sd/regan/GitlabCIData/
    - export OPTS="-r ${ARCTIC}/arctic_sample_0.fq -v --checkpoint=no"
    - export GASNET_BACKTRACE=1
    - echo "Submitting job on 3 nodes - on 2 nodes roughly RWDI=400s, DBG --kmer-lens 63 =456s  ...REL=170s"
    - knl_job=$(sbatch --parsable --job-name="CImhv-${CI_COMMIT_SHORT_SHA}" --account=m2865 -C knl --nodes=3 --qos=debug --time=30:00 --wrap="${RWDI}/mhmxx.py $OPTS -o ${RUN_PREFIX}/rwdi && ${DBG}/mhmxx.py ${OPTS} --kmer-lens 63 -o ${RUN_PREFIX}/dbg && echo Good")
    - echo "Waiting for knl job $knl_job"
    - date
    - while /bin/true ; do sleep 120 ; date ; sacct=$(sacct -j $knl_job -o state -X -n 2>/dev/null || true) ; if [ -n "${sacct}" -a -z "$(echo "${sacct}" | grep ING)" ] ; then break ; fi ; done
    - echo "sacct $sacct"
    - sacct=$(sacct -j $knl_job -X -n)
    - echo "sacct $sacct"
    - cat slurm-${knl_job}.out
    - wasgood=$(echo "${sacct}" | grep -v '0:0' || true)
    - if [ -z "$wasgood" ] ; then  true ; else  echo "knl job ${knl_job} failed somehow - ${wasgood}"; for spam in $(seq 1 300) ; do echo "flush output $spam" ; done; false ; fi
    - if [ ! -f ${RUN_PREFIX}/rwdi/final_assembly.fasta ] ; then FAILED="${FAILED} Did not find final_assembly.fasta on rwdi" ; fi
    - ${RWDI}/check_asm_quality.py --asm-dir ${RUN_PREFIX}/rwdi --expected-quals ${RWDI}/../share/good-arctic-sample0.txt --refs ${ARCTIC}/arcticsynth-refs.fa || FAILED="${FAILED} Did not pass check_asm_quality.py on rwdi"
    - if [ ! -f ${RUN_PREFIX}/dbg/final_assembly.fasta ] ; then FAILED="${FAILED} Did not find final_assembly.fasta on dbg" ; fi
    - ${RWDI}/check_asm_quality.py --asm-dir ${RUN_PREFIX}/dbg --expected-quals ${RWDI}/../share/good-arctic-sample0.txt --refs ${ARCTIC}/arcticsynth-refs.fa || echo "Expected dit not pass check_asm_quality.py on dbg with reduced workflow"
    - if [ -z "$FAILED" ] ; then  true ; else echo "Something failed somehow - ${FAILED}"; for spam in $(seq 1 300) ; do echo "flush output $spam" ; done ; false ; fi
    - echo "Completed"

Cori:accuracy:
  stage: accuracy
  tags:
    - Cori
  script:
    - set -e
    - set -x
    - uname -a
    - pwd
    - date
    - export GASNET_BACKTRACE=1
    - echo "Establishing variables"
    - export MHMXX_SOURCE=$(pwd)
    - export BASE=${SCRATCH}/tmp/gitlab-runner-scratch-Cori-mhmxx-${USER}
    - export SCRATCH=${BASE}/mhmxx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export INSTALL_PREFIX=${SCRATCH}/install
    - export BUILD_PREFIX=${SCRATCH}/build
    - export RUN_PREFIX=${SCRATCH}/runs
    - echo "BASE=${BASE} SCRATCH=${SCRATCH}"
    - echo "Loading KNL modules for upcxx on cori"
    - source ${MHMXX_SOURCE}/.env-cori-knl/gnu.sh
    - exec >  >(tee -ia ${SCRATCH}/accuracy.log)
    - exec 2> >(tee -ia ${SCRATCH}/accuracy.err >&2)
    - echo "Logging to ${SCRATCH}/accuracy.log and .err at $(date) on $(uname -n) in $(pwd)"    
    - module list
    - cd $SCRATCH
    - FAILED=""
    - echo "Testing accuracy"
    - export REL=${INSTALL_PREFIX}-knl/bin/
    - export ARCTIC=/global/cscratch1/sd/regan/GitlabCIData/
    - export OPTS="-r ${ARCTIC}/arctic_sample_0.fq -v --checkpoint=no"
    - echo "Submitting job on 5 nodes... on 2 nodes is is roughly REL=170s"
    - knl_job=$(sbatch --parsable --job-name="CImha-${CI_COMMIT_SHORT_SHA}" --account=m2865 -C knl --nodes=5 --qos=debug --time=10:00 --wrap="${REL}/mhmxx.py $OPTS -o ${RUN_PREFIX}/rel && echo Good")
    - echo "Submitting full arctic job on 15 nodes"
    - export OPTS2="-r ${ARCTIC}/arctic_samples.fq -v --checkpoint=no"
    - knl_job2=$(sbatch --parsable --job-name="CI-mhmxx-${CI_COMMIT_SHORT_SHA}" --account=m2865 -C knl --nodes=15 --qos=debug --time=30:00 --wrap="${REL}/mhmxx.py $OPTS2 -o ${RUN_PREFIX}/rel-full && echo Good")
    - echo "Waiting for knl job $knl_job"
    - date
    - while /bin/true ; do sleep 120 ; date ; sacct=$(sacct -j $knl_job -o state -X -n 2>/dev/null || true) ; if [ -n "${sacct}" -a -z "$(echo "${sacct}" | grep ING)" ] ; then break ; fi ; done
    - echo "sacct $sacct"
    - sacct=$(sacct -j $knl_job -X -n)
    - echo "sacct $sacct"
    - cat slurm-${knl_job}.out
    - wasgood=$(echo "${sacct}" | grep -v '0:0' || true)
    - if [ -z "$wasgood" ] ; then  true ; else  echo "knl job ${knl_job} failed somehow - ${wasgood}"; for spam in $(seq 1 300) ; do echo "flush output $spam" ; done; false ; fi
    - if [ ! -f ${RUN_PREFIX}/rel/final_assembly.fasta ] ; then FAILED="${FAILED} Did not find final_assembly.fasta on rel" ; fi
    - ${REL}/check_asm_quality.py --asm-dir ${RUN_PREFIX}/rel --expected-quals ${REL}/../share/good-arctic-sample0.txt --refs ${ARCTIC}/arcticsynth-refs.fa || FAILED="${FAILED} Did not pass check_asm_quality.py"
    - echo "Waiting for second (full) job to finish ${knl_job2}"
    - while /bin/true ; do sleep 120 ; date ; sacct=$(sacct -j $knl_job2 -o state -X -n 2>/dev/null || true) ; if [ -n "${sacct}" -a -z "$(echo "${sacct}" | grep ING)" ] ; then break ; fi ; done
    - echo "sacct $sacct"
    - sacct=$(sacct -j $knl_job2 -X -n)
    - echo "sacct $sacct"
    - cat slurm-${knl_job2}.out
    - wasgood=$(echo "${sacct}" | grep -v '0:0' || true)
    - if [ -z "$wasgood" ] ; then  true ; else  echo "knl job ${knl_job2} failed somehow - ${wasgood}"; for spam in $(seq 1 300) ; do echo "flush output $spam" ; done; false ; fi
    - if [ ! -f ${RUN_PREFIX}/rel-ful/final_assembly.fasta ] ; then FAILED="${FAILED} Did not find final_assembly.fasta on rel-full" ; fi
    - ${REL}/check_asm_quality.py --asm-dir ${RUN_PREFIX}/rel-full --expected-quals ${REL}/../share/good-arcticsynth.txt --refs ${ARCTIC}/arcticsynth-refs.fa || FAILED="${FAILED} Did not pass check_asm_quality.py (full)"
    - if [ -z "$FAILED" ] ; then  true ; else echo "Something failed somehow - ${FAILED}"; for spam in $(seq 1 300) ; do echo "flush output $spam" ; done ; false ; fi
    - echo "Completed"





#
# hulk
#

HULK:build:
  stage: build
  tags:
    - HULK
  script:
    - set -e
    - set -x
    - git submodule init
    - git submodule sync
    - git submodule update
    - BASE=/work/gitlab-ci
    - CI_INSTALL=$BASE/ci-install-mhmxx-upcxx-${HULK_UPCXX_VER}
    - export PATH=$CI_INSTALL/bin:/bin:/usr/bin:/usr/local/bin
    - export HIPMER_DATA=${BASE}/scratch/
    - mkdir -p ${HIPMER_DATA}
    - export SCRATCH=${BASE}/scratch/mhmxx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export RUN_PREFIX=${SCRATCH}/runs
    - export GASNET_BACKTRACE=1
    - echo "Verifing and/or downloading test arctic data set"
    - export ARCTIC_URL=https://portal.nersc.gov/project/hipmer/MetaHipMer_datasets_12_2019/ArcticSynth/samples/
    - bash -c "[ -f ${HIPMER_DATA}/arcticsynth-refs.fa ] || ( curl -LO ${ARCTIC_URL}/arcticsynth-refs.fa.gz && gunzip arcticsynth-refs.fa.gz && mv arcticsynth-refs.fa ${HIPMER_DATA}/arcticsynth-refs.fa )"
    - bash -c "[ -f ${HIPMER_DATA}/arctic_sample_0.fq ] || ( curl -LO ${ARCTIC_URL}/arctic_sample_0.fq.gz && gunzip arctic_sample_0.fq.gz && mv arctic_sample_0.fq ${HIPMER_DATA}/arctic_sample_0.fq )"
    - echo "Establishing all tests under BASE=$BASE and SCRATCH=$SCRATCH"
    - rm -rf ${SCRATCH}
    - mkdir -p ${SCRATCH}
    - chmod a+rx ${SCRATCH}
    - chmod g+s ${SCRATCH}
    - mkdir -p ${RUN_PREFIX}
    - exec >  >(tee -ia ${SCRATCH}/build.log)
    - exec 2> >(tee -ia ${SCRATCH}/build.err >&2)
    - echo "Logging to ${SCRATCH}/build.log and .err at $(date) on $(uname -n) in $(pwd)"  
    - export MHMXX_SOURCE=$(pwd)
    - env
    - uname -a
    - pwd
    - find * -type d -ls
    - date
    - echo "Purging any old tests"
    - ls -td ${BASE}/scratch/mhmxx-inst-* | tail -n +8 | xargs  rm -rf '{}' ';' || /bin/true
    - df -h
    - FAILED=""
    - echo "Checking for cmake, Berkeley UPC and UPC++"
    - which cmake && cmake --version || FAILED="${FAILED} cmake not found"
    - echo "Checking or building upcxx"
    - which upcxx || UPCXXVER=${HULK_UPCXX_VER} ./upcxx-utils/contrib/install_upcxx.sh $CI_INSTALL || FAILED="${FAILED} could not install upcxx"
    - upcxx --version || FAILED="${FAILED} no upcxx was found"
    - echo "Building all flavors"
    - mkdir -p ${RUN_PREFIX}
    - export GASNET_BACKTRACE=1
    - export INSTALL_PREFIX=${SCRATCH}
    - rm -rf $SCRATCH/build
    - mkdir -p $SCRATCH/build
    - cd $SCRATCH/build
    - echo "Building Debug"
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}/mhmxx-dbg -DCMAKE_BUILD_TYPE=Debug ${MHMXX_SOURCE} || FAILED="${FAILED} Could not configure Debug"
    - make -j 16 all install || FAILED="${FAILED} Could not build Debug"
    - make clean
    - export UPCXX_CODEMODE=debug
    - echo "Building RelWithDebInfo with UPCXX_CODEMODE=$UPCXX_CODEMODE"
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}/mhmxx-rwdi -DCMAKE_BUILD_TYPE=RelWithDebInfo ${MHMXX_SOURCE} || FAILED="${FAILED} could not configure RelWithDebInfo"
    - make -j 16 all install || FAILED="${FAILED} Cuold not build RelWithDebInfo"
    - make clean
    - unset UPCXX_CODEMODE
    - echo "Building Release"
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}/mhmxx-rel -DCMAKE_BUILD_TYPE=Release ${MHMXX_SOURCE} || FAILED="${FAILED} could not configure Release"
    - make -j 16 all install || FAILED="${FAILED} Could not build Release"
    - echo "${FAILED}"
    - if [ -z "$FAILED" ] ; then  true ; else echo "Something failed somehow - ${FAILED}"; for spam in $(seq 1 300) ; do echo "flush output $spam" ; done ; false ; fi
    - cd -
    - rm -rf $SCRATCH/build
    - echo "Completed"

    

HULK:validation:
  stage: validation
  tags:
    - HULK
  script:
    - set -e
    - set -x
    - BASE=/work/gitlab-ci
    - CI_INSTALL=$BASE/ci-install-mhmxx-upcxx-${HULK_UPCXX_VER}
    - export PATH=$CI_INSTALL/bin:/bin:/usr/bin:/usr/local/bin
    - export HIPMER_DATA=${BASE}/scratch/
    - export SCRATCH=${BASE}/scratch/mhmxx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export RUN_PREFIX=${SCRATCH}/runs
    - export INSTALL_PREFIX=${SCRATCH}
    - export GASNET_BACKTRACE=1
    - exec >  >(tee -ia ${SCRATCH}/validation.log)
    - exec 2> >(tee -ia ${SCRATCH}/validation.err >&2)
    - echo "Logging to ${SCRATCH}/validation.log and .err at $(date) on $(uname -n) in $(pwd)"  
    - echo "Validating all tests under BASE=$BASE and SCRATCH=$SCRATCH"
    - env
    - df -h
    - uname -a
    - pwd
    - date
    - upcxx --version
    - FAILED=""
    - reads=${HIPMER_DATA}/arctic_sample_0.fq 
    - export DBG=${INSTALL_PREFIX}/mhmxx-dbg/bin/
    - export RWDI=${INSTALL_PREFIX}/mhmxx-rwdi/bin/
    - export REL=${INSTALL_PREFIX}/mhmxx-rel/bin/
    - echo "Starting RelWithDebInfo mhmxx on Arctic $reads"
    - ${RWDI}/mhmxx.py -r $reads -o ${RUN_PREFIX}/rwdi --checkpoint=no -v || FAILED="${FAILED} Could not run rwdi"
    - echo "Checking run metrics using $(which metaquast.py) $(metaquast.py --version)"
    - echo "verify rwdi results $(ls -la ${RUN_PREFIX}/rwdi)"
    - if [ ! -f ${RUN_PREFIX}/rwdi/final_assembly.fasta ] ; then FAILED="${FAILED} Did not find final_assembly.fasta on rwdi" ; fi
    - ${RWDI}/check_asm_quality.py --asm-dir ${RUN_PREFIX}/rwdi --expected-quals ${RWDI}/../share/good-arctic-sample0.txt --refs {HIPMER_DATA}/arcticsynth-refs.fa || FAILED="${FAILED} Did not pass check_asm_quality.py for rwdi"
    - echo "Starting debug run on with reduced workflow"
    - ${DBG}/mhmxx.py -r $reads -o ${RUN_PREFIX}/dbg --kmer-lens 31,63 --checkpoint=no -v || FAILED="${FAILED} Could not run dbg"
    - echo "verify dbg results $(ls -la ${RUN_PREFIX}/dbg)"
    - if [ ! -f ${RUN_PREFIX}/dbg/final_assembly.fasta ] ; then FAILED="${FAILED} Did not find final_assembly.fasta on dbg" ; fi
    - ${DBG}/check_asm_quality.py --asm-dir ${RUN_PREFIX}/dbg --expected-quals ${DBG}/../share/good-arctic-sample0.txt --refs ${HIPMER_DATA}/arcticsynth-refs.fa || echo "Expected did not pass check_asm_quality.py for dbg with reduced workflow"
    - if [ -z "$FAILED" ] ; then  true ; else echo "Something failed somehow - ${FAILED}"; for spam in $(seq 1 300) ; do echo "flush output $spam" ; done ; false ; fi
    - echo "Completed"

HULK:accuracy:
  stage: accuracy
  tags:
    - HULK
  script:
    - set -e
    - set -x
    - git submodule init
    - git submodule sync
    - git submodule update
    - BASE=/work/gitlab-ci
    - CI_INSTALL=$BASE/ci-install-mhmxx-upcxx-${HULK_UPCXX_VER}
    - export PATH=$CI_INSTALL/bin:/bin:/usr/bin:/usr/local/bin
    - export HIPMER_DATA=${BASE}/scratch/
    - export SCRATCH=${BASE}/scratch/mhmxx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export RUN_PREFIX=${SCRATCH}/runs
    - export INSTALL_PREFIX=${SCRATCH}
    - export GASNET_BACKTRACE=1
    - exec >  >(tee -ia ${SCRATCH}/accuracy.log)
    - exec 2> >(tee -ia ${SCRATCH}/accuracy.err >&2)
    - echo "Logging to ${SCRATCH}/accuracy.log and .err at $(date) on $(uname -n) in $(pwd)"  
    - echo "Running accuracy tests under BASE=$BASE and SCRATCH=$SCRATCH"
    - env
    - df -h
    - uname -a
    - pwd
    - date
    - upcxx --version
    - FAILED=""
    - reads=${HIPMER_DATA}/arctic_sample_0.fq 
    - export REL=${INSTALL_PREFIX}/mhmxx-rel/bin/
    - echo "Starting Release mhmxx on Arctic $reads"
    - ${REL}/mhmxx.py -r $reads -o ${RUN_PREFIX}/rel --checkpoint=no -v || FAILED="${FAILED} Could nor run rel version"
    - echo "verify rel results $(ls -la ${RUN_PREFIX}/rel)"
    - if [ ! -f ${RUN_PREFIX}/rel/final_assembly.fasta ] ; then FAILED="${FAILED} Did not find final_assembly.fasta on rel" ; fi
    - ${REL}/check_asm_quality.py --asm-dir ${RUN_PREFIX}/rel --expected-quals ${REL}/../share/good-arctic-sample0.txt --refs ${HIPMER_DATA}/arcticsynth-refs.fa  || FAILED="${FAILED} Did not pass check_asm_quality.py for rel"
    - if [ -z "$FAILED" ] ; then  true ; else echo "Something failed somehow - ${FAILED}"; for spam in $(seq 1 300) ; do echo "flush output $spam" ; done ; false ; fi
    - echo "Completed"

after_script:
  - echo "Done"

