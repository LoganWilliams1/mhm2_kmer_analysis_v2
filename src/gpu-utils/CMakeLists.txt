if(NOT ENABLE_CUDA)
    message(FATAL_ERROR "Trying to build GPU-UTILS but CUDA is not enabled")
endif()


set(CMAKE_CUDA_STANDARD 14 CACHE STRING "")
set(CMAKE_CUDA_STANDARD_REQUIRED ON CACHE BOOL "")
set(CMAKE_CUDA_EXTENSIONS OFF CACHE BOOL "")
enable_language(CUDA)

find_package(OpenMP REQUIRED)
find_package(CUDA REQUIRED)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_CUDA_SEPARABLE_COMPILATION ON)

if (${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.18)
  set(CMAKE_CUDA_ARCHITECTURES 30 35 50 60 70)
else()
  CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS_LIST)
  if(ARCH_FLAGS_LIST)
    STRING(REPLACE ";" " " ARCH_FLAGS "${ARCH_FLAGS_LIST}")
  else()
    foreach(_CMAKE_CUDA_COMPUTE_CAPABILITY 30 50 60 70)
      set(ARCH_FLAGS "${ARCH_FLAGS} -gencode arch=compute_${_CMAKE_CUDA_COMPUTE_CAPABILITY},code=sm_${_CMAKE_CUDA_COMPUTE_CAPABILITY}")
    endforeach()
    if(NOT CMAKE_CUDA_COMPUTE_CAPABILITY)
      set(CMAKE_CUDA_COMPUTE_CAPABILITY 70 CACHE STRING "")
    endif()
    message(WARNING "Could not auto-detect the GPU arch flags building for all gpu compute capabilities 3 - 7 and PTX for ${CMAKE_CUDA_COMPUTE_CAPABILITY}")
    set(ARCH_FLAGS "${ARCH_FLAGS} -gencode arch=compute_${CMAKE_CUDA_COMPUTE_CAPABILITY},code=sm_${CMAKE_CUDA_COMPUTE_CAPABILITY}")
    set(ARCH_FLAGS "${ARCH_FLAGS} -gencode arch=compute_${CMAKE_CUDA_COMPUTE_CAPABILITY},code=compute_${CMAKE_CUDA_COMPUTE_CAPABILITY}")
  endif()
endif()

message(STATUS "ARCH_FLAGS=${ARCH_FLAGS}")


set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Xcompiler=-Wall,${OpenMP_CXX_FLAGS} ${ARCH_FLAGS}")
message(STATUS "CMAKE_CUDA_FLAGS=${CMAKE_CUDA_FLAGS}")

add_library(GPU_UTILS_LIBRARY_obj OBJECT gpu_utils.cpp gpu_common.cpp)
if (${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.13)
  target_link_libraries(GPU_UTILS_LIBRARY_obj INTERFACE OpenMP::OpenMP_CXX)
endif()

set_source_files_properties(gpu_utils.cpp gpu_common.cpp PROPERTIES LANGUAGE CUDA LINKER_LANGUAGE CUDA)
option(GPU_UTILS_SHARED "GPU-utils shared library" OFF)
option(GPU_UTILS_STATIC "GPU-utils static library" ON)

if (GPU_UTILS_SHARED)
  add_library(GPU_UTILS_LIBRARY_shared SHARED $<TARGET_OBJECTS:GPU_UTILS_LIBRARY_obj>)
  set_property(TARGET GPU_UTILS_LIBRARY_shared PROPERTY CUDA_RESOLVE_DEVICE_SYMBOLS ON)
  target_link_libraries(GPU_UTILS_LIBRARY_shared INTERFACE OpenMP::OpenMP_CXX)
  install(TARGETS GPU_UTILS_LIBRARY_shared LIBRARY DESTINATION lib)
endif()
if (GPU_UTILS_STATIC)
  add_library(GPU_UTILS_LIBRARY_static STATIC $<TARGET_OBJECTS:GPU_UTILS_LIBRARY_obj>)
  target_link_libraries(GPU_UTILS_LIBRARY_static INTERFACE OpenMP::OpenMP_CXX)
  set_property(TARGET GPU_UTILS_LIBRARY_static PROPERTY CUDA_RESOLVE_DEVICE_SYMBOLS ON)
  install(TARGETS GPU_UTILS_LIBRARY_static ARCHIVE DESTINATION lib)
endif()

